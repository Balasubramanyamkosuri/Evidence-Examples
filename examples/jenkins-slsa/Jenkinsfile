pipeline {
    agent any
    tools {
        jfrog 'jfrog-cli-latest'
        maven 'maven'
    }
    environment {
            PACKAGE_REPO_NAME = 'maven-libs-release-local'
            MARKDOWN_FILE_NAME = 'JenkinsSLSA.md'
            PREDICATE_FILE_NAME = 'decoded-payload.json'
            PREDICATE_TYPE = 'http://slsa.dev/provenance/v1'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/VigneshC-Jfrog/jenkins-slsa-evidence-example.git', credentialsId: 'github'
            }
        }

        stage('JFrog CLI Configuration') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ARTIFACTORY_URL', variable: 'ARTIFACTORY_URL'),
                        string(credentialsId: 'ACCESS_TOKEN', variable: 'ACCESS_TOKEN')
                    ]) {
                        jf 'c add jenkins-slsa-evidence --url=${ARTIFACTORY_URL} --access-token=${ACCESS_TOKEN}'
                    }
                }
            }
        }

        stage('Build and Publish') {
            steps {
                script {
                        jf 'c use jenkins-slsa-evidence'
                        jf 'mvn-config \
                                --repo-resolve-releases=maven-libs-release \
                                --repo-resolve-snapshots=maven-libs-snapshot \
                                --repo-deploy-releases=maven-libs-release \
                                --repo-deploy-snapshots=maven-libs-snapshot'
                         jf 'mvn clean install'
                         // Retrieve Maven project artifactId and version for use in later steps
                         env.PACKAGE_NAME = sh(script: "mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout", returnStdout: true).trim()
                         env.PACKAGE_VERSION = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                }
            }
        }
    }

    post {
        success {
            provenanceRecorder artifactFilter: 'target/*.jar', targetDirectory: 'build/slsa'
            script {
                def slsaDir = 'build/slsa'
                def jsonlFiles = sh(script: "ls ${slsaDir}/*.jsonl 2>/dev/null || true", returnStdout: true).trim().split("\\r?\\n")
                def jsonlFile = jsonlFiles.find { it }
                if (!jsonlFile) {
                    echo "No .jsonl file found in ${slsaDir}/"
                }
                echo "Found JSONL file: ${jsonlFile}"
                def jsonlText = readFile(jsonlFile)
                def jsonlMap = new groovy.json.JsonSlurperClassic().parseText(jsonlText)
                def decodedPayload = new String(jsonlMap.decodedPayload.decodeBase64(), 'UTF-8')
                def prettyJson = groovy.json.JsonOutput.prettyPrint(decodedPayload)
                writeFile file: "decoded-payload.json", text: prettyJson
                echo "Decoded payload saved to decoded-payload.json"
                sh 'python3 json-to-md.py'
            }
            withCredentials([
                file(credentialsId: 'PRIVATE_PEM', variable: 'PRIVATE_PEM'),
                string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS')
            ]) {
                jf 'evd create \
            --package-name ${PACKAGE_NAME} \
            --package-version ${PACKAGE_VERSION} \
            --package-repo-name ${PACKAGE_REPO_NAME} \
            --key ${PRIVATE_PEM} \
            --key-alias ${KEY_ALIAS} \
            --predicate ${PREDICATE_FILE_NAME} \
            --predicate-type ${PREDICATE_TYPE} \
            --markdown ${MARKDOWN_FILE_NAME}'
            }
        }
    }
}